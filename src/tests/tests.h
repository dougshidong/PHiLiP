#ifndef __TESTS_H__
#define __TESTS_H__

#include "parameters/all_parameters.h"
#include <deal.II/grid/tria.h>
namespace PHiLiP {
namespace Tests {

/// Base class of all the tests.
/** Generated by the TestsFactory.
 */
class TestsBase
{
public:
    const Parameters::AllParameters *const all_parameters; ///< Pointer to all parameters
    //const int ndim; ///< Number of dimensions. Run-time variable instead of compile-time constant.
    //const int nstate; ///< Number of state variables. Run-time variable instead of compile-time constant.

    /// Constructor. Deleted the default constructor since it should not be used
    TestsBase () = delete;
    /// Constructor.
    TestsBase(const Parameters::AllParameters *const parameters_input);

    /// Destructor.
    virtual ~TestsBase()
    {};

    /// Basically the main and only function of this class.
    /** This will get overloaded by the derived test classes.
     */
    virtual int run_test() const = 0;

};

/// Test factory, that will create the correct test with the right template parameters.
template<int dim, int nstate>
class TestsFactory
{
public:
    /// Recursive factory that will create TestBase<int dim, int nstate>
    /** Must be called with the highest number possible of dimension and nstate. For example
     *
     *  TestBase test = TestFactory::create_test<3,5>(parameters_input)
     */
    static std::unique_ptr< TestsBase > create_test(const Parameters::AllParameters *const parameters_input);

    /// Selects the actual test such as grid convergence, numerical flux conversation, etc.
    static std::unique_ptr< TestsBase > select_test(const Parameters::AllParameters *const parameters_input);
};

} // Tests namespace
} // PHiLiP namespace
#endif

